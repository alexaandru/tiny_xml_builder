Tiny XML Builder
================
Alexandru Ungur <alexaandru@gmail.com>
:icons:
:toc:
:website: http://github.com/alexaandru/tiny_xml_builder

Description
-----------

A very simple XML builder class. +
I wanted something really simple that I could easily extend myself later on if I needed to. +
Ironically, in four years since I created and used TinyXml, I never needed to extend it :-)
I figured, it may as well work for others in that case, so here it is.

Acknowledgements
----------------

A big thanks to Jim Weirich for his great advices on Ruby-talk. +
The BlankSlate "mechanism" he describes at: http://onestepback.org/index.cgi/Tech/Ruby/BlankSlate.rdoc
and which this library depends upon, is one of the first things I've learnt when started to play with Ruby DSLs.

Features/Problems
-----------------
 - You cannot have XML elements named _\__id\___, _\__send___, _method_missing_, _instance_eval_ or _respond_to_ as those are NOT undefined (on purpose) by BlankSlate mechanism;
 - There are other limitations related to ``implicit receiver'' calls, e.g.:

.Explicit receiver example
---------------------------------------------
puts TinyXml::Builder.new.foo {|f| f.p 'bar'}
---------------------------------------------

will output:

------------
<foo>
  <p>bar</p>
</foo>
------------

while the following:

.Implicit receiver example
-----------------------------------------
puts TinyXml::Builder.new.foo { p 'bar' }
-----------------------------------------

will output:

------
"bar"
<foo>
</foo>
------

as "p" method exists in outer scope and does an entirely different thing than what (missing) methods of TinyXml do.

Synopsis
--------

.Example Usage
-----------------------------------------------------------------------------------------
builder = TinyXml::Builder.new
builder.html do |xhtml|
  xhtml.head do |head|
    head.title 'Hello World'
    head.meta :name => :keywords, :content => 'hello, world' 
    head.meta :name => :description, :content => 'hello world sample usage for XML class'
  end
  xhtml.body do |body|
    body.div :id => 'main' do |div_main|
      div_main.h1 "Hello World"
      div_main.p "Hello HTML world", "from XML"
    end
  end
end

puts builder
-----------------------------------------------------------------------------------------

.Alternate Example Usage
-----------------------------------------------------------------------------------------
puts TinyXml::Builder.new.html {
  head {
    title 'Hello World'
    meta :name => :keywords, :content => 'hello, world' 
    meta :name => :description, :content => 'hello world sample usage for XML class'
  }

  body {
    div(:id => 'main') { |div|
      div.h1 "Hello World"
      div.p "Hello HTML world", "from XML"
    }
  }
}
-----------------------------------------------------------------------------------------

both will output:

-----------------------------------------------------------------------------------------
<html>
  <head>
    <title>Hello World</title>
    <meta name="keywords" content="hello, world" />
    <meta name="description" content="hello world sample usage for XML class" />
  </head>
  <body>
    <div id="main">
      <h1>Hello World</h1>
      <p>Hello HTML world</p>
      <p>from XML</p>
    </div>
  </body>
</html>
-----------------------------------------------------------------------------------------

Requirements
------------

NONE

Install
-------

*********************************
sudo gem install tiny_xml_builder
*********************************

License
-------

(The MIT License)

Copyright (c) 2010 Alexandru Ungur

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// vim: set syntax=asciidoc:
